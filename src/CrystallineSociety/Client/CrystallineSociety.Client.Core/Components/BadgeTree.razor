@using CrystallineSociety.Shared.Dtos.BadgeSystem
@page "/accordion"
@using Microsoft.AspNetCore.Components.Web

<div class="border rounded-3" style="height: 400px; overflow: auto">
    <div class="accordion br">
        @if (Badges == null)
        {
            <div class="d-flex justify-content-center align-items-center" style="height: 100px;">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            @foreach (var level in BadgeLevels.Select((value, index) => new { value, index }))
            {
                var levelName = Enum.GetName(typeof(BadgeLevel), level.value);
                var levelId = level.index + 1;

                <div class="accordion-item" style="border-bottom-left-radius: 0; border-bottom-right-radius: 0;">
                    <h2 class="accordion-header" id="heading@(levelId)" style="border-bottom-left-radius: 0; border-bottom-right-radius: 0;">
                        <button class="accordion-button collapsed"
                                style="border-bottom-left-radius: 0; border-bottom-right-radius: 0;"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#collapse@(levelId)"
                                aria-expanded="false"
                                aria-controls="collapse@(levelId)">
                            <div class="fw-bold">@levelName</div>
                        </button>
                    </h2>
                    <div id="collapse@(levelId)"
                         class="accordion-collapse collapse"
                         aria-labelledby="heading@(levelId)"
                         data-bs-parent="#accordionExample">
                        <div class="accordion-body p-2 pb-1">
                            <ul class="list-group border-0">
                                @foreach (var badge in Badges.Where(b => b.Level == level.value))
                                {
                                    <li class="list-group-item rounded border-0 mt-0 mb-1 cursor-pointer @(ActiveBadgeUrl == badge.Url ? "active" : "")"
                                        @onclick="() => OnBadgeClick(badge)"
                                        style="cursor: @(ActiveBadgeUrl == badge.Url ? "default" : "pointer"); transition: 0.2s">
                                        @badge.Title
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>
